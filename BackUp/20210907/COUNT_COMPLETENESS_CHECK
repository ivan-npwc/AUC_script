
 
   library(spatialEco)
   library(dplyr)
   library(raster)
   library(RSQLite)
   source("Modules/01_create_tile_polygons.r")

   labelInput="E:\\2021_30_OPP\\20210531_103906"
   Species="NFSadult"
   site="30"
   
   SQLite_path_system= "D:\\NPWC\\ssl_db_system.db"
   sqlite    <- dbDriver("SQLite")
   SSLsys <- dbConnect(sqlite,   SQLite_path_system)
   polygons_local_sites=dbReadTable(SSLsys,"polygons_local_sites")

    HouloutPoligonDIR=paste0(labelInput,"\\Polygons\\Houlout")
    RookeryPolygonDIR=paste0(labelInput,"\\Polygons\\Rookery")
    ObserverPointDIR=paste0(labelInput,"\\Observer count")
########################################################################################### check if exists subdir	
	listFiles=list.files(labelInput)
	GoogleKMZ=paste0(basename(labelInput),".kmz")
	checkSubDir= GoogleKMZ %in%  listFiles 
	if (checkSubDir==T) {listLabelInput=labelInput}
	if (checkSubDir==F) {listLabelInput=list.dirs(labelInput,full.names=T,recursive =F)}
##########################################@#########################################spp data frame for tiles google kmz
 for (i in 1:length(listLabelInput)) {
   labelInputSub=listLabelInput[i]
	SpP_dataW=create_tile_polygons(labelInputSub)
if (i==1){SpP_dataALL=SpP_dataW}
if (i!=1){SpP_dataALL=rbind(SpP_dataALL,SpP_dataW)}	
	}
###############################################################################	 CREATE SITE POLYGONS
lspSort=polygons_local_sites[polygons_local_sites$site==site,]
lspSort=lspSort[order(lspSort$order_point),]
PRJ=lspSort$projection[1]
 coordinates(lspSort) <- ~ latitude+longitude
    srPolygons=list()
	ListPol=unique(lspSort$id)	
for(s in 1:length(ListPol)){
srPolygons[[s]]=Polygons(list(Polygon(lspSort[lspSort$id==ListPol[s],])),paste0(ListPol[s]))}
SpP=SpatialPolygons(srPolygons);proj4string(SpP) <-PRJ
#############################################################################CHECK TILES OVER LOCAL SITE
 proj4string(SpP_dataALL) <-PRJ
    # plot(SpP_dataALL,add=T)
	#  plot(SpP,add=T, col=2)	
completenes=NULL	
 for (i in 1:length(SpP)) {
      localSite= SpP[i]
	  NameLocalSite=localSite@polygons[[1]]@ID
	  pts = SpP_dataALL[!is.na(over(SpP_dataALL,as(localSite,"SpatialPolygons"))),]
	# plot(pts, col=2); plot(localSite, add=T)
 if (length(pts) !=0){	
	  AreaTiles=sum(area(pts))
	  AreaLocSite= area(localSite)
	  Coverege= AreaTiles/AreaLocSite*100
	}
 if (length(pts) ==0){Coverege=0}	
	  row1=data.frame(site=site, local_site=NameLocalSite,coverage=Coverege)
	  completenes=rbind(completenes,row1)
}

	completenes <<- completenes
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	