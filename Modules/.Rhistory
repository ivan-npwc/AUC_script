PointsImg <- SpatialPointsDataFrame(coords = coords,data = data, proj4string = PRJ)
vectorSequence=Model_polygon$HEXID
ImgsInModelPol=NULL
for (p in 1: length(vectorSequence)) {
Model_polygon_one=Model_polygon[Model_polygon$HEXID == vectorSequence[p],]
ImgInPol <- point.in.poly(PointsImg,Model_polygon_one)
ImgInPol1=as.data.frame(ImgInPol)
ImgInPol2=ImgInPol1[is.na(ImgInPol1[,2]) == FALSE,]
ImgInPol3=data.frame(link=unique(ImgInPol2$link))
ImgsInModelPol=rbind(ImgInPol3,ImgsInModelPol)
}
PointsImg
,point.in.poly
?point.in.poly
shiny::runApp('D:/AUC_script')
point.in.poly
ImgInPol <- point.in.poly(PointsImg,Model_polygon_one)
ImgInPol1=as.data.frame(ImgInPol)
ImgInPol2=ImgInPol1[is.na(ImgInPol1[,2]) == FALSE,]
ImgInPol3=data.frame(link=unique(ImgInPol2$link))
ImgsInModelPol=rbind(ImgInPol3,ImgsInModelPol)
ImgInPol <- PointsImg %over% Model_polygon_one
ImgInPol
ImgInPol[is.na(ImgInPol$HEXID)==F,]
PointsImg
ImgInPol <- Model_polygon_one %over% PointsImg
ImgInPol$link
ImgInPol
ImgsInModelPol=NULL
for (p in 1: length(vectorSequence)) {
Model_polygon_one=Model_polygon[Model_polygon$HEXID == vectorSequence[p],]
ImgInPol <- Model_polygon_one %over% PointsImg
ImgInPol1= ImgInPol[is.na(ImgInPol$link)==F,]
ImgsInModelPol=rbind(ImgInPol1,ImgsInModelPol)
}
ImgsInModelPol
Model_polygon_one=Model_polygon[Model_polygon$HEXID == vectorSequence[p],]
ImgInPol <- Model_polygon_one %over% PointsImg
ImgInPol1= ImgInPol[is.na(ImgInPol$link)==F,]
ImgInPol1
data.frame(ImgInPol1)
for (p in 1: length(vectorSequence)) {
Model_polygon_one=Model_polygon[Model_polygon$HEXID == vectorSequence[p],]
ImgInPol <- Model_polygon_one %over% PointsImg
ImgInPol1= data.frame(link=ImgInPol[is.na(ImgInPol$link)==F,])
ImgsInModelPol=rbind(ImgInPol1,ImgsInModelPol)
}
ImgsInModelPol=NULL
for (p in 1: length(vectorSequence)) {
Model_polygon_one=Model_polygon[Model_polygon$HEXID == vectorSequence[p],]
ImgInPol <- Model_polygon_one %over% PointsImg
ImgInPol1= data.frame(link=ImgInPol[is.na(ImgInPol$link)==F,])
ImgsInModelPol=rbind(ImgInPol1,ImgsInModelPol)
}
ImgsInModelPol
lob_tmp=NULL
# i=4
#resultBlob_tmp <- foreach(i = 1:length(listImageBl),.combine=rbind) %dopar% {
for (i in 1: length (listImageBl)) {
name=basename(listImageBl[i])
if (name %in% ImgsInModelPol$link) {
RefSort=RefTable[RefTable$link==name,]
img_pth=listImageBl[i]
mask0=preds[i, , , ]
mask0=as.Image(mask0)
img=resize(mask0,1024,1024)
nmask = thresh(img, 18, 18, 0.009)
nmask1 <- fillHull(nmask)
# nmask2 = opening(nmask1, makeBrush(17,shape='diamond') ) # shape='Gaussian', sigma=50
eierode = erode(nmask1, makeBrush(11, shape='diamond'))
eidilat = dilate(eierode, makeBrush(13, shape='diamond'))
nmask3 = fillHull(eidilat)
nmask4 = bwlabel(nmask3)
max(nmask4)
if (max(nmask4)!=0) {
oc=ocontour(nmask4)
#####################################################################
ImgOc=NULL
for (o in 1: length(oc)){   #length oc is number blobs in the img
pre=data.frame(x=as.numeric(oc[o][[1]][,1]),y=as.numeric(oc[o][[1]][,2]),id=paste0(name,"#",o),img=name, blob=o)
ImgOc=rbind(pre,ImgOc)}
#		 origImgPTH= paste0(labelInput,"\\Predict\\Haulout\\",name)
#		  OrigImg=readImage(origImgPTH)
#		  plot(OrigImg)
#		for (y in 1:length(oc)) {points(oc[[y]], col=2,cex=0.1)}
#-------------------------------------------------------------
NSdifStep=((RefSort$north-RefSort$south)*2)/1024
WEdifStep= ((RefSort$east-RefSort$west)*2)/1024
NSdif50=(RefSort$north-RefSort$south)/2
RefSort$north50=RefSort$north+NSdif50
SNdif50=(RefSort$north-RefSort$south)/2
RefSort$south50=RefSort$south-SNdif50
WEdiff50= (RefSort$east-RefSort$west)/2
RefSort$west50=RefSort$west-WEdiff50
EWdiff50= (RefSort$east-RefSort$west)/2
RefSort$east50=RefSort$east+EWdiff50
Lonlim=c(RefSort$west50,RefSort$east50)
Latlim=c(RefSort$south50,RefSort$north50)
#------------------------------------------------------------
#---------------------------------------------------------------
ImgOc$lon=((1024-ImgOc$y)*NSdifStep)+RefSort$south50
ImgOc$lat=(ImgOc$x*WEdifStep)+RefSort$west50
ImgOcFin=rbind(ImgOcFin,ImgOc)
print(paste0("IMGS ",i, "/", length(listImageBl), "  PREDS  ",f,"/",length(listPreds)  ))
}
}
}
}
f=1
Species=strsplit(basename(listPreds[f]),split = "_")[[1]][2]
pth_resultBlob <<- paste0(labelInput,"\\Predict\\",Species,"_BlobTable_", date1, ".csv")
pth_resultBlob_tmp <<-paste0(labelInput,"\\Predict\\",Species, "_BlobTable_", date1, "_tmp.csv")
PredsRDS=readRDS(listPreds[f])
listImageBl=PredsRDS$listImageBl
preds=PredsRDS$preds
dim(preds)=c(PredsRDS$DimPreds)
listImageBl
ImgsInModelPol$link
ultBlob_tmp <- foreach(i = 1:length(listImageBl),.combine=rbind) %dopar% {
for (i in 1: length (listImageBl)) {
name=basename(listImageBl[i])
if (name %in% ImgsInModelPol$link) {
RefSort=RefTable[RefTable$link==name,]
img_pth=listImageBl[i]
mask0=preds[i, , , ]
mask0=as.Image(mask0)
img=resize(mask0,1024,1024)
nmask = thresh(img, 18, 18, 0.009)
nmask1 <- fillHull(nmask)
# nmask2 = opening(nmask1, makeBrush(17,shape='diamond') ) # shape='Gaussian', sigma=50
eierode = erode(nmask1, makeBrush(11, shape='diamond'))
eidilat = dilate(eierode, makeBrush(13, shape='diamond'))
nmask3 = fillHull(eidilat)
nmask4 = bwlabel(nmask3)
max(nmask4)
if (max(nmask4)!=0) {
oc=ocontour(nmask4)
#####################################################################
ImgOc=NULL
for (o in 1: length(oc)){   #length oc is number blobs in the img
pre=data.frame(x=as.numeric(oc[o][[1]][,1]),y=as.numeric(oc[o][[1]][,2]),id=paste0(name,"#",o),img=name, blob=o)
ImgOc=rbind(pre,ImgOc)}
#		 origImgPTH= paste0(labelInput,"\\Predict\\Haulout\\",name)
#		  OrigImg=readImage(origImgPTH)
#		  plot(OrigImg)
#		for (y in 1:length(oc)) {points(oc[[y]], col=2,cex=0.1)}
#-------------------------------------------------------------
NSdifStep=((RefSort$north-RefSort$south)*2)/1024
WEdifStep= ((RefSort$east-RefSort$west)*2)/1024
NSdif50=(RefSort$north-RefSort$south)/2
RefSort$north50=RefSort$north+NSdif50
SNdif50=(RefSort$north-RefSort$south)/2
RefSort$south50=RefSort$south-SNdif50
WEdiff50= (RefSort$east-RefSort$west)/2
RefSort$west50=RefSort$west-WEdiff50
EWdiff50= (RefSort$east-RefSort$west)/2
RefSort$east50=RefSort$east+EWdiff50
Lonlim=c(RefSort$west50,RefSort$east50)
Latlim=c(RefSort$south50,RefSort$north50)
#------------------------------------------------------------
#---------------------------------------------------------------
ImgOc$lon=((1024-ImgOc$y)*NSdifStep)+RefSort$south50
ImgOc$lat=(ImgOc$x*WEdifStep)+RefSort$west50
ImgOcFin=rbind(ImgOcFin,ImgOc)
print(paste0("IMGS ",i, "/", length(listImageBl), "  PREDS  ",f,"/",length(listPreds)  ))
}
}
}
}
name=basename(listImageBl[i])
name
name %in% ImgsInModelPol$link
RefSort=RefTable[RefTable$link==name,]
img_pth=listImageBl[i]
mask0=preds[i, , , ]
mask0=as.Image(mask0)
img=resize(mask0,1024,1024)
nmask = thresh(img, 18, 18, 0.009)
nmask1 <- fillHull(nmask)
# nmask2 = opening(nmask1, makeBrush(17,shape='diamond') ) # shape='Gaussian', sigma=50
eierode = erode(nmask1, makeBrush(11, shape='diamond'))
eidilat = dilate(eierode, makeBrush(13, shape='diamond'))
nmask3 = fillHull(eidilat)
nmask4 = bwlabel(nmask3)
max(nmask4)
oc=ocontour(nmask4)
plot(oc)
length(oc)
ImgOc=NULL
for (o in 1: length(oc)){   #length oc is number blobs in the img
pre=data.frame(x=as.numeric(oc[o][[1]][,1]),y=as.numeric(oc[o][[1]][,2]),id=paste0(name,"#",o),img=name, blob=o)
ImgOc=rbind(pre,ImgOc)}
ImgOc
NSdifStep=((RefSort$north-RefSort$south)*2)/1024
WEdifStep= ((RefSort$east-RefSort$west)*2)/1024
NSdif50=(RefSort$north-RefSort$south)/2
RefSort$north50=RefSort$north+NSdif50
SNdif50=(RefSort$north-RefSort$south)/2
RefSort$south50=RefSort$south-SNdif50
WEdiff50= (RefSort$east-RefSort$west)/2
RefSort$west50=RefSort$west-WEdiff50
EWdiff50= (RefSort$east-RefSort$west)/2
RefSort$east50=RefSort$east+EWdiff50
Lonlim=c(RefSort$west50,RefSort$east50)
Latlim=c(RefSort$south50,RefSort$north50)
ImgOc$lon=((1024-ImgOc$y)*NSdifStep)+RefSort$south50
ImgOc$lat=(ImgOc$x*WEdifStep)+RefSort$west50
ImgOcFin=rbind(ImgOcFin,ImgOc)
print(paste0("IMGS ",i, "/", length(listImageBl), "  PREDS  ",f,"/",length(listPreds)  ))
i
length (listImageBl)
i=1
name=basename(listImageBl[i])
for (i in 1: length (listImageBl)) {
name=basename(listImageBl[i])
if (name %in% ImgsInModelPol$link) {
RefSort=RefTable[RefTable$link==name,]
img_pth=listImageBl[i]
mask0=preds[i, , , ]
mask0=as.Image(mask0)
img=resize(mask0,1024,1024)
nmask = thresh(img, 18, 18, 0.009)
nmask1 <- fillHull(nmask)
# nmask2 = opening(nmask1, makeBrush(17,shape='diamond') ) # shape='Gaussian', sigma=50
eierode = erode(nmask1, makeBrush(11, shape='diamond'))
eidilat = dilate(eierode, makeBrush(13, shape='diamond'))
nmask3 = fillHull(eidilat)
nmask4 = bwlabel(nmask3)
max(nmask4)
if (max(nmask4)!=0) {
oc=ocontour(nmask4)
#####################################################################
ImgOc=NULL
for (o in 1: length(oc)){   #length oc is number blobs in the img
pre=data.frame(x=as.numeric(oc[o][[1]][,1]),y=as.numeric(oc[o][[1]][,2]),id=paste0(name,"#",o),img=name, blob=o)
ImgOc=rbind(pre,ImgOc)}
#		 origImgPTH= paste0(labelInput,"\\Predict\\Haulout\\",name)
#		  OrigImg=readImage(origImgPTH)
#		  plot(OrigImg)
#		for (y in 1:length(oc)) {points(oc[[y]], col=2,cex=0.1)}
#-------------------------------------------------------------
NSdifStep=((RefSort$north-RefSort$south)*2)/1024
WEdifStep= ((RefSort$east-RefSort$west)*2)/1024
NSdif50=(RefSort$north-RefSort$south)/2
RefSort$north50=RefSort$north+NSdif50
SNdif50=(RefSort$north-RefSort$south)/2
RefSort$south50=RefSort$south-SNdif50
WEdiff50= (RefSort$east-RefSort$west)/2
RefSort$west50=RefSort$west-WEdiff50
EWdiff50= (RefSort$east-RefSort$west)/2
RefSort$east50=RefSort$east+EWdiff50
Lonlim=c(RefSort$west50,RefSort$east50)
Latlim=c(RefSort$south50,RefSort$north50)
#------------------------------------------------------------
#---------------------------------------------------------------
ImgOc$lon=((1024-ImgOc$y)*NSdifStep)+RefSort$south50
ImgOc$lat=(ImgOc$x*WEdifStep)+RefSort$west50
ImgOcFin=rbind(ImgOcFin,ImgOc)
}
}
}
print(paste0("IMGS ",i, "/", length(listImageBl), "  PREDS  ",f,"/",length(listPreds)  ))
}
#resultBlob_tmp <- foreach(i = 1:length(listImageBl),.combine=rbind) %dopar% {
for (i in 1: length (listImageBl)) {
name=basename(listImageBl[i])
if (name %in% ImgsInModelPol$link) {
RefSort=RefTable[RefTable$link==name,]
img_pth=listImageBl[i]
mask0=preds[i, , , ]
mask0=as.Image(mask0)
img=resize(mask0,1024,1024)
nmask = thresh(img, 18, 18, 0.009)
nmask1 <- fillHull(nmask)
# nmask2 = opening(nmask1, makeBrush(17,shape='diamond') ) # shape='Gaussian', sigma=50
eierode = erode(nmask1, makeBrush(11, shape='diamond'))
eidilat = dilate(eierode, makeBrush(13, shape='diamond'))
nmask3 = fillHull(eidilat)
nmask4 = bwlabel(nmask3)
max(nmask4)
if (max(nmask4)!=0) {
oc=ocontour(nmask4)
#####################################################################
ImgOc=NULL
for (o in 1: length(oc)){   #length oc is number blobs in the img
pre=data.frame(x=as.numeric(oc[o][[1]][,1]),y=as.numeric(oc[o][[1]][,2]),id=paste0(name,"#",o),img=name, blob=o)
ImgOc=rbind(pre,ImgOc)}
#		 origImgPTH= paste0(labelInput,"\\Predict\\Haulout\\",name)
#		  OrigImg=readImage(origImgPTH)
#		  plot(OrigImg)
#		for (y in 1:length(oc)) {points(oc[[y]], col=2,cex=0.1)}
#-------------------------------------------------------------
NSdifStep=((RefSort$north-RefSort$south)*2)/1024
WEdifStep= ((RefSort$east-RefSort$west)*2)/1024
NSdif50=(RefSort$north-RefSort$south)/2
RefSort$north50=RefSort$north+NSdif50
SNdif50=(RefSort$north-RefSort$south)/2
RefSort$south50=RefSort$south-SNdif50
WEdiff50= (RefSort$east-RefSort$west)/2
RefSort$west50=RefSort$west-WEdiff50
EWdiff50= (RefSort$east-RefSort$west)/2
RefSort$east50=RefSort$east+EWdiff50
Lonlim=c(RefSort$west50,RefSort$east50)
Latlim=c(RefSort$south50,RefSort$north50)
#------------------------------------------------------------
#---------------------------------------------------------------
ImgOc$lon=((1024-ImgOc$y)*NSdifStep)+RefSort$south50
ImgOc$lat=(ImgOc$x*WEdifStep)+RefSort$west50
ImgOcFin=rbind(ImgOcFin,ImgOc)
}
}
print(paste0("IMGS ",i, "/", length(listImageBl), "  PREDS  ",f,"/",length(listPreds)))
}
ImgOcFin=NULL
for (i in 1: length (listImageBl)) {
name=basename(listImageBl[i])
if (name %in% ImgsInModelPol$link) {
RefSort=RefTable[RefTable$link==name,]
img_pth=listImageBl[i]
mask0=preds[i, , , ]
mask0=as.Image(mask0)
img=resize(mask0,1024,1024)
nmask = thresh(img, 18, 18, 0.009)
nmask1 <- fillHull(nmask)
# nmask2 = opening(nmask1, makeBrush(17,shape='diamond') ) # shape='Gaussian', sigma=50
eierode = erode(nmask1, makeBrush(11, shape='diamond'))
eidilat = dilate(eierode, makeBrush(13, shape='diamond'))
nmask3 = fillHull(eidilat)
nmask4 = bwlabel(nmask3)
max(nmask4)
if (max(nmask4)!=0) {
oc=ocontour(nmask4)
#####################################################################
ImgOc=NULL
for (o in 1: length(oc)){   #length oc is number blobs in the img
pre=data.frame(x=as.numeric(oc[o][[1]][,1]),y=as.numeric(oc[o][[1]][,2]),id=paste0(name,"#",o),img=name, blob=o)
ImgOc=rbind(pre,ImgOc)}
#		 origImgPTH= paste0(labelInput,"\\Predict\\Haulout\\",name)
#		  OrigImg=readImage(origImgPTH)
#		  plot(OrigImg)
#		for (y in 1:length(oc)) {points(oc[[y]], col=2,cex=0.1)}
#-------------------------------------------------------------
NSdifStep=((RefSort$north-RefSort$south)*2)/1024
WEdifStep= ((RefSort$east-RefSort$west)*2)/1024
NSdif50=(RefSort$north-RefSort$south)/2
RefSort$north50=RefSort$north+NSdif50
SNdif50=(RefSort$north-RefSort$south)/2
RefSort$south50=RefSort$south-SNdif50
WEdiff50= (RefSort$east-RefSort$west)/2
RefSort$west50=RefSort$west-WEdiff50
EWdiff50= (RefSort$east-RefSort$west)/2
RefSort$east50=RefSort$east+EWdiff50
Lonlim=c(RefSort$west50,RefSort$east50)
Latlim=c(RefSort$south50,RefSort$north50)
#------------------------------------------------------------
#---------------------------------------------------------------
ImgOc$lon=((1024-ImgOc$y)*NSdifStep)+RefSort$south50
ImgOc$lat=(ImgOc$x*WEdifStep)+RefSort$west50
ImgOcFin=rbind(ImgOcFin,ImgOc)
}
}
print(paste0("IMGS ",i, "/", length(listImageBl), "  PREDS  ",f,"/",length(listPreds)))
}
ImgOcFin
coordinates(ImgOcFin) <- ~ lat+lon
srPolygons=list()
ListPol=unique(ImgOcFin$id)
for(s in 1:length(ListPol)){
srPolygons[[s]]=Polygons(list(Polygon(ImgOcFin[ImgOcFin$id==ListPol[s],])),paste0(ListPol[s]))
print (paste0("Processing ", s,"/",length(ListPol), " blobs"))}
plot(srPolygons)
SpP=SpatialPolygons(srPolygons);proj4string(SpP) <-PRJ
info=data.frame(id=row.names(SpP))
info1=strsplit(x=as.character(info$id),split="#")
info2=NULL
for (i in 1:length(info1)) {info2$img[i]= paste0(info1[[i]][1]);info2$blob[i]=info1[[i]][2]}
info3=data.frame(img= info2$img,  blob=info2$blob)
row.names(info3)=paste0(info2$img,"#",info2$blob)
SppBLB=SpatialPolygonsDataFrame(SpP,info3)
plot(SppBLB)
SpP_pth
readRDS
SdPDT=readRDS(SpP_pth)
plot(SdPDT)
listImgsPol=unique(SdPDT$img)
PolygonsIMGs=list()
for (h in 1:length(listImgsPol)) {
imgName=as.character(listImgsPol[h])
TableExten= RefTable[RefTable$link==imgName,]
TableExten1=NULL
TableExten1$lat[1]=TableExten$west;TableExten1$lon[1]=TableExten$south
TableExten1$lat[2]=TableExten$west;TableExten1$lon[2]=TableExten$north
TableExten1$lat[3]=TableExten$east;TableExten1$lon[3]=TableExten$north
TableExten1$lat[4]=TableExten$east;TableExten1$lon[4]=TableExten$south
TableExten1=data.frame(TableExten1);TableExten1$img=imgName
coordinates(TableExten1) <- ~ lat+lon
PolygonsIMGs[[h]]=Polygons(list(Polygon(TableExten1)),imgName)
}
SppIMGs=SpatialPolygons(PolygonsIMGs);proj4string(SppIMGs) <-PRJ
imgT=data.frame(img=listImgsPol);row.names(imgT)=listImgsPol
SppIMGs1=SpatialPolygonsDataFrame(SppIMGs,imgT)
img=SppIMGs1[SppIMGs1$img==imgName,]   # small img
blobs=SppBLB[SppBLB$img==imgName,]     # blob in big img
indexIN=over(blobs,img)
indexIN1= row.names(indexIN)[indexIN$img==imgName]
indexIN2= as.numeric(indexIN1[is.na(indexIN1)==F])
BlobsINSmall=blobs[row.names(blobs)[indexIN2],] # blobs IN small img
InMdlPl=over(BlobsINSmall,Model_polygon)
indexBlInModPol=  as.numeric(row.names(InMdlPl)[is.na(InMdlPl$HEXID) == F])
BlobsINSmallOverModel=BlobsINSmall[row.names(BlobsINSmall)[indexBlInModPol],]  # blobs IN model poligon and IN small img
img
plot(img)
SppBLB[SppBLB$img==imgName,]
SppBLB$img
imgName
plot(blobs)
length(SppBLB$img)
unique(SdPDT$img)
length(unique(SdPDT$img))
listImgsPol
for (h in 1:length(listImgsPol)) {
imgName=as.character(listImgsPol[h])
TableExten= RefTable[RefTable$link==imgName,]
TableExten1=NULL
TableExten1$lat[1]=TableExten$west;TableExten1$lon[1]=TableExten$south
TableExten1$lat[2]=TableExten$west;TableExten1$lon[2]=TableExten$north
TableExten1$lat[3]=TableExten$east;TableExten1$lon[3]=TableExten$north
TableExten1$lat[4]=TableExten$east;TableExten1$lon[4]=TableExten$south
TableExten1=data.frame(TableExten1);TableExten1$img=imgName
coordinates(TableExten1) <- ~ lat+lon
PolygonsIMGs[[h]]=Polygons(list(Polygon(TableExten1)),imgName)
}
PolygonsIMGs
imgName
------------------------------------
imgName=SppBLB$img[5]
img=SppIMGs1[SppIMGs1$img==imgName,]   # small img
blobs=SppBLB[SppBLB$img==imgName,]     # blob in big img
SppBLB$img
SppBLB$img[5]
imgName=SppBLB$img[5]
imgName
paste0(SppBLB$img[5])
------------------------------------
imgName=paste0(SppBLB$img[5])
img=SppIMGs1[SppIMGs1$img==imgName,]   # small img
blobs=SppBLB[SppBLB$img==imgName,]     # blob in big img
imgName=paste0(SppBLB$img[5])
SppIMGs1[SppIMGs1$img==imgName,]
SppBLB[SppBLB$img==imgName,]
imgName=paste0(SppBLB$img[5])
img=SppIMGs1[SppIMGs1$img==imgName,]   # small img
blobs=SppBLB[SppBLB$img==imgName,]
blobs
SppIMGs1[SppIMGs1$img==imgName,]
plot(img)
indexIN=over(blobs,img)
blobs
img
library(dplyr)
pth="F:\\YandexDisk\\CURRENT WORK\\TULENY\\2020\\REPORT\\Excell\\ErrorCountSSL.csv"
Count=read.csv(pth)
AdultCount= Count[!(Count$age %in% c("P","DP")),]
AdultCount= Count[!(Count$age == "F",]
library(dplyr)
pth="F:\\YandexDisk\\CURRENT WORK\\TULENY\\2020\\REPORT\\Excell\\ErrorCountSSL.csv"
Count=read.csv(pth)
AdultCount= Count[!(Count$age %in% c("P","DP")),]
AdultCount= Count[Count$age == "F",]
AdultCount
AdultCount1=AdultCount %>%
dplyr:: select(ObserverCount, AutoCount,date)%>%
group_by(date) %>%
summarise(ObserverCount=sum(ObserverCount,na.rm=T),AutoCount=sum(AutoCount,na.rm=T))
AdultCount1$diff=	 AdultCount1$ObserverCount-AdultCount1$AutoCount
AdultCount1$Percentdiff=AdultCount1$diff/AdultCount1$ObserverCount*100
AdultCount1
mean(AdultCount1$Percentdiff)   # MEAN ERROR
boxplot(AdultCount1$Percentdiff,plot=F)  # QUANTIL
length(AdultCount1$date)
AdultCount1$diff=	 AdultCount1$AutoCount-AdultCount1$ObserverCount
AdultCount1$Percentdiff=AdultCount1$diff/AdultCount1$ObserverCount*100
AdultCount1
mean(AdultCount1$Percentdiff)   # MEAN ERROR
boxplot(AdultCount1$Percentdiff,plot=F)  # QUANTIL
length(AdultCount1$date)
AdultCount1=AdultCount %>%
dplyr:: select(ObserverCount, AutoCount,date)%>%
group_by(date) %>%
summarise(ObserverCount=sum(ObserverCount,na.rm=T),AutoCount=sum(AutoCount,na.rm=T))
AdultCount1$diff=	 AdultCount1$AutoCount-AdultCount1$ObserverCount
AdultCount1$Percentdiff=AdultCount1$diff/ AdultCount1$AutoCount*100
AdultCount1
mean(AdultCount1$Percentdiff)   # MEAN ERROR
boxplot(AdultCount1$Percentdiff,plot=F)  # QUANTIL
length(AdultCount1$date)
library(dplyr)
pth="F:\\YandexDisk\\CURRENT WORK\\TULENY\\2020\\REPORT\\Excell\\ErrorCountSSL.csv"
Count=read.csv(pth)
AdultCount= Count[!(Count$age %in% c("P","DP")),]
AdultCount= Count[Count$age == "F",]
AdultCount1=AdultCount %>%
dplyr:: select(ObserverCount, AutoCount,date)%>%
group_by(date) %>%
summarise(ObserverCount=sum(ObserverCount,na.rm=T),AutoCount=sum(AutoCount,na.rm=T))
AdultCount1$diff=	 AdultCount1$AutoCount-AdultCount1$ObserverCount
AdultCount1$Percentdiff=AdultCount1$diff/AdultCount1$ObserverCount*100
AdultCount1
mean(AdultCount1$Percentdiff)   # MEAN ERROR
boxplot(AdultCount1$Percentdiff,plot=F)  # QUANTIL
boxplot(AdultCount1$Percentdiff)
length(AdultCount1$date)
