#########################################################################################################	
#if (Species %in% c("WLRS")  & file.exists(ModelPoligonPTH) & file.exists(ObserverPointPTH)) {
#source("Modules/01_create_tile_polygons.r")
#library(dplyr)
#SpP_dataW=create_tile_polygons(labelInput)
#          ModelPoligon1=shapefile(ModelPoligonPTH)
#		  ObserverPoint=shapefile(ObserverPointPTH)
#          PredictPoint1=read.csv(PredictPointPTH)	
#		  
#		  proj4string(ModelPoligon1) <- crs
#		  proj4string(ObserverPoint) <- crs
#		  ##########
#coords <- data.frame(lat= PredictPoint1$lon, lon=PredictPoint1$lat)   
#data   <- data.frame(age= PredictPoint1$age)   # data
#PredictPoints <- SpatialPointsDataFrame(coords = coords,
#                                        data = data, 
#                                        proj4string = crs)
#		  ##################
#		  ObserverPoint =spTransform(ObserverPoint,crs)
#		  ModelPoligon1 = spTransform(ModelPoligon1,crs)
#		  PredictPoints = spTransform(PredictPoints,crs)
#		  #####################
 #         
#          proj4string(SpP_dataW) <- crs
#   AutoModelCount =  point.in.poly(PredictPoints,ModelPoligon1) #
#   AutoModelCount=AutoModelCount[is.na(AutoModelCount$FID)==F,]
#   ObserverModelCount = point.in.poly(ObserverPoint,ModelPoligon1)
#   ObserverModelCount=ObserverModelCount[is.na(ObserverModelCount$FID.y)==F,]
   
#  ObserverCount= data.frame(point.in.poly(ObserverPoint,SpP_dataW))
#   AutoCount= data.frame(point.in.poly(PredictPoints,SpP_dataW))
#   AutoModelCount= data.frame(point.in.poly(ObserverModelCount,SpP_dataW))
   
   
   ######################################################################
#AnimalsDens =NULL   
#   imgs=SpP_dataW$`rownames(srPolygonsData)`
   
 #    for (i in 1:length(imgs)) {
#   img=imgs[i]
#   area=SpP_dataW[SpP_dataW$`rownames(srPolygonsData)`== img,]
#   area1=areaPolygon(area)
   
#   PredIN =  PredictPoints %over% area
#   TotalPredCount= length(PredIN[,1][is.na(PredIN[,1])==F])
   
#   ObsIn= ObserverModelCount %over% area
#   ObsIncount= length(ObsIn[,1][is.na(ObsIn[,1])==F])
   
   
#   PredModelIN =  AutoModelCount %over% area
#   ModalPredCount= length(PredModelIN[,1][is.na(PredModelIN[,1])==F])
   
#   row1=data.frame(img=img, area=area1, ObserverCount=ObsIncount,TotalPredCount=TotalPredCount,ModalPredCount=ModalPredCount)
   
#   AnimalsDens=rbind(AnimalsDens,row1)  	
#}
###########################################################
#AnimalsDens$labelinput=labelinput
#write.csv(AnimalsDens,AnimalsDensPTH,row.names=F)

#AnimalsDens1$Myerr=abs(AnimalsDens1$TotalPredCount - AnimalsDens1$ModalPredCount)
#AnimalsDens1$diff=  as.numeric(abs(AnimalsDens1$ModalPredCount - AnimalsDens1$ObserverCount))
#AnimalsDens1$err= AnimalsDens1$diff/AnimalsDens1$ObserverCount*100
#AnimalsDens2=AnimalsDens1[!(AnimalsDens1$err %in% c("NaN", "Inf")),]
#AnimalsDens2$TotalPredCount=as.numeric(AnimalsDens2$TotalPredCount)
#hist(AnimalsDens2$diff ~ AnimalsDens2$TotalPredCount)

#pth="C:\\Users\\usato\\Documents\\AnimalsDens2.csv"
#tbl=read.csv(pth)
#tbl=as_tibble(tbl)

#tbl=tbl[tbl$TotalPredCount>0,] # WE USE FOR CORRECTION ONLY TILES WITH ANIMALS
#tbl=tbl[tbl$Myerr == 0,]      # WE USE ONLY TILES WERE MODEL COUNT=FUL COUNT # TO PREVENT SITUATION WHEN MODEL COUNT ~1, BUT TILE VERY DENSE AGREGATION
#tbl$diff=  tbl$ModalPredCount -tbl$ObserverCount # TO FINDE DIFFERENCE
#boxplot(tbl$diff~tbl$TotalPredCount)      # PLOT ERROR VIA DANSE
#abline(h = 0, col = "red")
#a=boxplot(tbl$diff~tbl$TotalPredCount,plot=F)
#median =c(data.frame(a$stats)[3,])   # FINDE MEDIAN ERROR VIA DENSE
#coorectTable=data.frame(TotalPredCount=as.numeric(a$names),correct=median)  # CREATE CORRECT TABLE VIA DENSE


#tbl=read.csv(pth)                                                         # READ ORIG FULL TABLE AGAIN
#tbl1=left_join(tbl,coorectTable, by="TotalPredCount")

#tbl1$CorrectCount = tbl1$TotalPredCount-tbl1$correct                   # ESRIMATE CORECTED COUNT ON EACH TILES BASED ON DANSE

#sum(tbl1$CorrectCount)
#sum(tbl1$TotalPredCount)



############################
#}				
########################################################################################################
###########################################################################################
} else {print("No obderver count dir or model poliygons dir found")}
