kmlPathSave <<- paste0(labelInput,"\\Predict\\",Species, "_", date1, ".kml")
csvPathSave= paste0(labelInput,"\\Predict\\",Species,"_", date1, ".csv")
}
if (ModelCheckAlg==T){
kmlPathSave <<- CheckModelkmlPathSave
csvPathSave <<- CheckModelcsvPathSave
}
if(dir.exists(Haulout_polygonDir)==T){Haulout_polygon<-list.files(Haulout_polygonDir,full.names=T,pattern=".shp")}
if(dir.exists(Exlude_polygonDir)==T){Exlude_polygon<-list.files(Exlude_polygonDir,full.names=T,pattern=".shp")}
if(dir.exists(Rookery_polygonDir)==T){Rookery_polygon <-list.files(Rookery_polygonDir,full.names=T,pattern=".shp")}
clastering=F
#	if (Species=="WLRS"){clastering=T}
minDistance =0.2 # min distance 0.1 m minDistance
labelInput
date1=substr(basename(labelInput),1,15)
Species
crs    <- "+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs"
pathTablePoints=paste0(labelInput, "\\Predict\\",Species, "_BlobTable_GEO_",date1, ".csv")
Haulout_polygonDir=paste0(labelInput, "\\Polygons\\Haulout")
Exlude_polygonDir=paste0(labelInput, "\\Polygons\\Exclude")
Rookery_polygonDir=paste0(labelInput, "\\Polygons\\Rookery")
if (ModelCheckAlg==F){
kmlPathSave <<- paste0(labelInput,"\\Predict\\",Species, "_", date1, ".kml")
csvPathSave= paste0(labelInput,"\\Predict\\",Species,"_", date1, ".csv")
}
if (ModelCheckAlg==T){
kmlPathSave <<- CheckModelkmlPathSave
csvPathSave <<- CheckModelcsvPathSave
}
if(dir.exists(Haulout_polygonDir)==T){Haulout_polygon<-list.files(Haulout_polygonDir,full.names=T,pattern=".shp")}
if(dir.exists(Exlude_polygonDir)==T){Exlude_polygon<-list.files(Exlude_polygonDir,full.names=T,pattern=".shp")}
if(dir.exists(Rookery_polygonDir)==T){Rookery_polygon <-list.files(Rookery_polygonDir,full.names=T,pattern=".shp")}
if (Species =="NFSAdult") {BlobFemaleLimit=410}
if (Species =="SSLAdult") {BlobFemaleLimit=1200}
if (Species =="NFSPup") {BlobFemaleLimit=70}
if (Species =="WLRS") {BlobFemaleLimit=40}
if (Species == "SSLPup") {BlobFemaleLimit=0}
if (Species == "LRG") {BlobFemaleLimit=600}  # 900- junior
#################################################################################
PointsHoulout2=NULL
RookeryPoints=NULL
PupPoints=NULL
PointsToWrite=NULL
###################
dat<-read.csv(pathTablePoints)
dat<-dat[is.na(dat$lat) ==F ,]
dat3 <- data.frame(lat=dat$lon,   lon=dat$lat,  area=dat$s.area)
#######################################
#######################################
Pointsfilter=function (tble,pthPolygon) {
coords <- data.frame(lat= tble$lat, lon=tble$lon)
data   <- data.frame(area= tble$area)   # data
Points <- SpatialPointsDataFrame(coords = coords,
data = data,
proj4string =  CRS(crs))
Points =spTransform(Points,CRS(crs))
polygon_poly=shapefile(pthPolygon)
proj4string(polygon_poly) <- CRS(crs)
pts = Points[!is.na(over(Points,as(polygon_poly,"SpatialPolygons"))),]
#  index= Points %over% polygon_poly
#  Points$index=index[,1]
#  Points1=Points[is.na(Points$index)==F,]
#  latlon=data.frame(coordinates(Points1))
# PointsIN=data.frame(area=Points1$area,lat= latlon$lon ,lon=latlon$lat)
return(pts)
}
dat3
PupPoints=Pointsfilter(tble=dat3,pthPolygon=Rookery_polygon)
PupPoints
tble=dat3  ;pthPolygon=Haulout_polygon
coords <- data.frame(lat= tble$lat, lon=tble$lon)
data   <- data.frame(area= tble$area)   # data
Points <- SpatialPointsDataFrame(coords = coords,
data = data,
proj4string =  CRS(crs))
Points
Points =spTransform(Points,CRS(crs))
polygon_poly=shapefile(pthPolygon)
proj4string(polygon_poly) <- CRS(crs)
pts = Points[!is.na(over(Points,as(polygon_poly,"SpatialPolygons"))),]
pts
coords <- data.frame(lat= tble$lat, lon=tble$lon)
data   <- data.frame(area= tble$area)   # data
Points <- SpatialPointsDataFrame(coords = coords,
data = data,
proj4string =  CRS(crs))
Points =spTransform(Points,CRS(crs))
polygon_poly=shapefile(pthPolygon)
proj4string(polygon_poly) <- CRS(crs)
pts = Points[!is.na(over(Points,as(polygon_poly,"SpatialPolygons"))),]
#  index= Points %over% polygon_poly
#  Points$index=index[,1]
#  Points1=Points[is.na(Points$index)==F,]
#  latlon=data.frame(coordinates(Points1))
# PointsIN=data.frame(area=Points1$area,lat= latlon$lon ,lon=latlon$lat)
return(pts)
pts
runApp('E:/GIT HUB/AUC')
runApp('E:/GIT HUB/AUC')
library(magick)
library(tools)
#split into 4 images from one
labelInput= "E:\\2021_19_OPP\\20210729_113132_DKV1996"
date1=substr(basename(labelInput),1,15)
imgDirFROM=    paste0(labelInput,"\\Error_NFSAdult\\Image")
maskDirFROM=   paste0(labelInput,"\\Error_NFSAdult\\Mask")
imgDirTo=    paste0(labelInput,"\\Error_NFSAdult\\Image_PUP");dir.create(imgDirTo,showWarnings=F)
maskDirTo=   paste0(labelInput,"\\Error_NFSAdult\\Mask_PUP");dir.create(maskDirTo,showWarnings=F)
listBigMsk=list.files(maskDirFROM, full.names=T)
#####################
coordCrop1=paste0("512x512+128+128")
coordCrop2=paste0("512x512+384+128")
coordCrop3=paste0("512x512+128+384")
coordCrop4=paste0("512x512+384+384")
######################
cl <- makePSOCKcluster(detectCores (logical=FALSE))
clusterEvalQ(cl, {
library(magick)
library(tools)
})
registerDoParallel(cl)
foreach(i = 1:length(listBigMsk)) %dopar% {
#    for (i in 1: length(listBigMsk)) {
Crop1=NULL
Crop2=NULL
Crop3=NULL
Crop4=NULL
mskP=listBigMsk[i]
Nm= file_path_sans_ext(basename(mskP))
############################################# mask
BgMsk=image_read(mskP)
Crop1=image_crop(BgMsk,coordCrop1)
Crop2=image_crop(BgMsk,coordCrop2)
Crop3=image_crop(BgMsk,coordCrop3)
Crop4=image_crop(BgMsk,coordCrop4)
pthSave1=paste0(maskDirTo,"\\1#",Nm,".png")
pthSave2=paste0(maskDirTo,"\\2#",Nm,".png")
pthSave3=paste0(maskDirTo,"\\3#",Nm,".png")
pthSave4=paste0(maskDirTo,"\\4#",Nm,".png")
image_write(Crop1,pthSave1,format="png")
image_write(Crop2,pthSave2,format="png")
image_write(Crop3,pthSave3,format="png")
image_write(Crop4,pthSave4,format="png")
################################################## image
imgP=paste0(imgDirFROM,"\\",Nm,".jpg")
BgImg=image_read(imgP)
Crop1=image_crop(BgImg,coordCrop1)
Crop2=image_crop(BgImg,coordCrop2)
Crop3=image_crop(BgImg,coordCrop3)
Crop4=image_crop(BgImg,coordCrop4)
pthSave1=paste0(imgDirTo,"\\1#",Nm,".jpg")
pthSave2=paste0(imgDirTo,"\\2#",Nm,".jpg")
pthSave3=paste0(imgDirTo,"\\3#",Nm,".jpg")
pthSave4=paste0(imgDirTo,"\\4#",Nm,".jpg")
image_write(Crop1,pthSave1,format="jpg")
image_write(Crop2,pthSave2,format="jpg")
image_write(Crop3,pthSave3,format="jpg")
image_write(Crop4,pthSave4,format="jpg")
}
stopCluster(cl)
shiny::runApp('E:/GIT HUB/AUC')
library(magick)
library(tools)
#split into 4 images from one
labelInput= "E:\\2021_19_OPP\\20210729_113132_DKV1996"
date1=substr(basename(labelInput),1,15)
imgDirFROM=    paste0(labelInput,"\\Error_NFSAdult\\Image")
maskDirFROM=   paste0(labelInput,"\\Error_NFSAdult\\Mask")
imgDirTo=    paste0(labelInput,"\\Error_NFSAdult\\Image_PUP");dir.create(imgDirTo,showWarnings=F)
maskDirTo=   paste0(labelInput,"\\Error_NFSAdult\\Mask_PUP");dir.create(maskDirTo,showWarnings=F)
listBigMsk=list.files(maskDirFROM, full.names=T)
#####################
coordCrop1=paste0("512x512+128+128")
coordCrop2=paste0("512x512+384+128")
coordCrop3=paste0("512x512+128+384")
coordCrop4=paste0("512x512+384+384")
######################
cl <- makePSOCKcluster(detectCores (logical=FALSE))
clusterEvalQ(cl, {
library(magick)
library(tools)
})
registerDoParallel(cl)
foreach(i = 1:length(listBigMsk)) %dopar% {
#    for (i in 1: length(listBigMsk)) {
Crop1=NULL
Crop2=NULL
Crop3=NULL
Crop4=NULL
mskP=listBigMsk[i]
Nm= file_path_sans_ext(basename(mskP))
############################################# mask
BgMsk=image_read(mskP)
Crop1=image_crop(BgMsk,coordCrop1)
Crop2=image_crop(BgMsk,coordCrop2)
Crop3=image_crop(BgMsk,coordCrop3)
Crop4=image_crop(BgMsk,coordCrop4)
pthSave1=paste0(maskDirTo,"\\1#",Nm,".png")
pthSave2=paste0(maskDirTo,"\\2#",Nm,".png")
pthSave3=paste0(maskDirTo,"\\3#",Nm,".png")
pthSave4=paste0(maskDirTo,"\\4#",Nm,".png")
image_write(Crop1,pthSave1,format="png")
image_write(Crop2,pthSave2,format="png")
image_write(Crop3,pthSave3,format="png")
image_write(Crop4,pthSave4,format="png")
################################################## image
imgP=paste0(imgDirFROM,"\\",Nm,".jpg")
BgImg=image_read(imgP)
Crop1=image_crop(BgImg,coordCrop1)
Crop2=image_crop(BgImg,coordCrop2)
Crop3=image_crop(BgImg,coordCrop3)
Crop4=image_crop(BgImg,coordCrop4)
pthSave1=paste0(imgDirTo,"\\1#",Nm,".jpg")
pthSave2=paste0(imgDirTo,"\\2#",Nm,".jpg")
pthSave3=paste0(imgDirTo,"\\3#",Nm,".jpg")
pthSave4=paste0(imgDirTo,"\\4#",Nm,".jpg")
image_write(Crop1,pthSave1,format="jpg")
image_write(Crop2,pthSave2,format="jpg")
image_write(Crop3,pthSave3,format="jpg")
image_write(Crop4,pthSave4,format="jpg")
}
stopCluster(cl)
choose.dir()
###
if (!require("parallel")) {install.packages("parallel"); library("parallel")}
if (!require("doParallel")) {install.packages("doParallel"); library("doParallel")}
if (!require("foreach")) {install.packages("foreach"); library("foreach")}
library(tools)
library(EBImage)
dirMsk= "D:\\AUC_data\\NFS_Pup\\NewData\\Mask_PUP"
listMskTo=list.files(dirMsk,full.names=T)
cl <- makePSOCKcluster(detectCores (logical=FALSE))
clusterEvalQ(cl, {
library(tools)
library(EBImage)
})
registerDoParallel(cl)
foreach(i = 1:length(listMskTo)) %dopar% {
for (i in 1:length(listMskTo)) {
msk=readImage(listMskTo[i])
colorMode(msk)=Grayscale
if (dim(msk)[3]==4){msk1=msk[,,4];msk1=1-msk1}
if (dim(msk)[3]==2){msk1=msk[,,2]}
writeImage(msk1,listMskTo[i])
}
stopCluster(cl)
####################
if (!require("parallel")) {install.packages("parallel"); library("parallel")}
if (!require("doParallel")) {install.packages("doParallel"); library("doParallel")}
if (!require("foreach")) {install.packages("foreach"); library("foreach")}
library(tools)
library(EBImage)
dirMsk= "D:\\AUC_data\\NFS_Pup\\NewData\\Mask_PUP"
listMskTo=list.files(dirMsk,full.names=T)
cl <- makePSOCKcluster(detectCores (logical=FALSE))
clusterEvalQ(cl, {
library(tools)
library(EBImage)
})
registerDoParallel(cl)
foreach(i = 1:length(listMskTo)) %dopar% {
#for (i in 1:length(listMskTo)) {
msk=readImage(listMskTo[i])
colorMode(msk)=Grayscale
if (dim(msk)[3]==4){msk1=msk[,,4];msk1=1-msk1}
if (dim(msk)[3]==2){msk1=msk[,,2]}
writeImage(msk1,listMskTo[i])
}
stopCluster(cl)
choose.dir()
choose.dir()
species="SSLAdult"
OppDir="F:\\2021_138_OPP"
DirSave="F:\\SSLAdult"
DirSaveMsk=paste0(DirSave,"\\Mask")
DirSaveImg=paste0(DirSave,"\\Image")
listOPP=list.files(OppDir, full.names=T)
for (i in 1:length(listOPP)) {
opp=listOPP[i]
mskDir=paste0(opp,"\\Error_SSLAdult\\Mask")
imgDir=paste0(opp,"\\Error_SSLAdult\\Image")
listMsk=list.files(mskDir, full.names=T)
listImg=list.files(imgDir, full.names=T)
file.copy(listMsk,DirSaveMsk)
file.copy(listImg,DirSaveImg)
}
species="SSLPup"
OppDir="F:\\2021_138_OPP"
DirSave="F:\\SSLAdult"
DirSaveMsk=paste0(DirSave,"\\Mask")
DirSaveImg=paste0(DirSave,"\\Image")
listOPP=list.files(OppDir, full.names=T)
for (i in 1:length(listOPP)) {
opp=listOPP[i]
mskDir=paste0(opp,"\\Error_SSLPup\\Mask")
imgDir=paste0(opp,"\\Error_SSLPup\\Image")
listMsk=list.files(mskDir, full.names=T)
listImg=list.files(imgDir, full.names=T)
file.copy(listMsk,DirSaveMsk)
file.copy(listImg,DirSaveImg)
}
i
species="SSLPup"
OppDir="F:\\2021_138_OPP"
DirSave="F:\\SSLAdult"
DirSaveMsk=paste0(DirSave,"\\Mask")
DirSaveImg=paste0(DirSave,"\\Image")
listOPP=list.files(OppDir, full.names=T)
opp=listOPP[i]
mskDir=paste0(opp,"\\Error_SSLPup\\Mask")
imgDir=paste0(opp,"\\Error_SSLPup\\Image")
listMsk=list.files(mskDir, full.names=T)
listImg=list.files(imgDir, full.names=T)
listMsk
listImg
file.copy(listMsk,DirSaveMsk)
file.copy(listImg,DirSaveImg)
species="SSLPup"
OppDir="F:\\2021_138_OPP"
DirSave="F:\\SSLPup"
DirSaveMsk=paste0(DirSave,"\\Mask")
DirSaveImg=paste0(DirSave,"\\Image")
listOPP=list.files(OppDir, full.names=T)
for (i in 1:length(listOPP)) {
opp=listOPP[i]
mskDir=paste0(opp,"\\Error_SSLPup\\Mask")
imgDir=paste0(opp,"\\Error_SSLPup\\Image")
listMsk=list.files(mskDir, full.names=T)
listImg=list.files(imgDir, full.names=T)
file.copy(listMsk,DirSaveMsk)
file.copy(listImg,DirSaveImg)
}
shiny::runApp('E:/GIT HUB/AUC')
shiny::runApp('E:/GIT HUB/AUC')
shiny::runApp('E:/GIT HUB/AUC')
library(tools)
shiny::runApp('E:/GIT HUB/AUC')
file_path_sans_ext
runApp('E:/GIT HUB/AUC')
shiny::runApp()
runApp()
runApp()
library(sp)
library(spatialEco)
library(raster)
library(magick)
library(parallel)
library(doParallel)
library(EBImage)
labelInput
Species
TblAgeRef=NULL
SelectedCategory=    c("An","TF","TN","AN","AF","F","J","SA","Sa")   #c("F") #c("J") # c("Sa") c("P")     #
saveFolder = paste0(labelInput,"\\Predict\\Age_predict\\Train")
if (dir.exists(saveFolder)==F){dir.create(paste0(labelInput,"\\Predict\\Age_predict"));dir.create(saveFolder)}
TblAgeRefSave=   paste0(labelInput,"\\TRAIN_TblAgeRef_",SelectedCategory[1], ".csv")
cl <- makePSOCKcluster(detectCores(logical = F))
clusterEvalQ(cl, {
library(sp)
library(spatialEco)
library(raster)
library(magick)
library(EBImage)
})
registerDoParallel(cl)
##################################################################################################
date1=substr(basename(labelInput),1,8)
ObsCountDir=paste0(labelInput,"\\Observer count")
PthObserverCount=list.files(ObsCountDir, pattern= ".shp", full.names=T)
if (file.exists(PthObserverCount)==T) {
ImgDirHoul=paste0(labelInput,"\\Predict\\Haulout")
ImgDirRookery=paste0(labelInput,"\\Predict\\Rookery")
ImgListHoul=list.files(ImgDirHoul)
Pth_GeoInfoImg=list.files(labelInput,full.names=T, pattern="_table.csv")
GeoInfoImg=read.csv(Pth_GeoInfoImg)
GeoInfoImg$link1=paste0(GeoInfoImg$date,"_",GeoInfoImg$link)
ImgList=GeoInfoImg[GeoInfoImg$link1 %in% ImgListHoul,]
TableCount=shapefile(PthObserverCount)
proj4string(TableCount) <- "+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs"
#############
}
AgeRefRow1=  foreach(i = 1:length(ImgList$link1)) %dopar% {
# 	for (i in 1:length(ImgList$link1)) {
imgName=paste0(ImgList$link1[i])
RowSort=ImgList[ImgList$link1==imgName,]
NSdif50=(RowSort$north-RowSort$south)/2
RowSort$north50=RowSort$north+NSdif50
SNdif50=(RowSort$north-RowSort$south)/2
RowSort$south50=RowSort$south-SNdif50
WEdiff50= (RowSort$east-RowSort$west)/2
RowSort$west50=RowSort$west-WEdiff50
EWdiff50= (RowSort$east-RowSort$west)/2
RowSort$east50=RowSort$east+EWdiff50
xlim<<-unique(c(RowSort$west50,RowSort$east50))
ylim<<-unique(c(RowSort$south50,RowSort$north50))
Limit512=data.frame(west=RowSort$west,east=RowSort$east,south=RowSort$south,north=RowSort$north)
Poligon512 <- as(raster::extent(Limit512$west,Limit512$east,Limit512$south,Limit512$north), "SpatialPolygons")
proj4string(Poligon512) <- "+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs"
AmimalsInside512 <- point.in.poly(TableCount,Poligon512)
AmimalsInside512=as.data.frame(AmimalsInside512)
AmimalsInside512=AmimalsInside512[is.na(AmimalsInside512[,3]) == FALSE,]
if (length(AmimalsInside512$coords.x1)>0 ) {
pth_img=paste0(ImgDirHoul,"\\",imgName)
x=as.numeric((RowSort$east50-AmimalsInside512$coords.x1)/(RowSort$east50-RowSort$west50)*1024)
y=as.numeric((RowSort$north50-AmimalsInside512$coords.x2)/(RowSort$north50-RowSort$south50)*1024)
lat=as.numeric(AmimalsInside512$coords.x2)
lon= as.numeric(AmimalsInside512$coords.x1)
age=AmimalsInside512$LAYER
AgeRefRow= data.frame(age=age,lon,lat,x=x,y=y,pth_img = pth_img,OPP=labelInput)
AgeRefRow
}
}
tbl1=NULL
for (i in 1:length(AgeRefRow1)){
row1=AgeRefRow1[i]
if (is.null(row1[[1]])==F){
tbl1=rbind(data.frame(row1[[1]]),tbl1)
}}
for (i in 1: length(tbl1$pth_img)) {
if (tbl1$age[i] %in% c("TF","TN","An","AN")){tbl1$age[i]="An"}
if (tbl1$age[i] %in% c("AF","f")){tbl1$age[i]="F"}
if (tbl1$age[i] %in% c("SA","sa")){tbl1$age[i]="Sa"}
tbl1$pthSave[i]=paste0(saveFolder,"\\",tbl1$age[i],"_",i,"_",basename(tbl1$pth_img[i]))
}
write.csv(tbl1,TblAgeRefSave)
head(tbl1)
labelInput
runApp()
runApp()
runApp()
runApp()
PthObserverCount
file.exists(PthObserverCount)
labelInput
if (dir.exists(saveFolder)==F){dir.create(paste0(labelInput,"\\Predict\\Age_predict"));dir.create(saveFolder)}
stopCluster(cl)
library(sp)
library(spatialEco)
library(raster)
library(magick)
library(parallel)
library(doParallel)
library(EBImage)
labelInput
Species
TblAgeRef=NULL
SelectedCategory=    c("An","TF","TN","AN","AF","F","J","SA","Sa","P")   #c("F") #c("J") # c("Sa") c("P")     #
saveFolder = paste0(labelInput,"\\Predict\\Age_predict\\Train")
if (dir.exists(saveFolder)==F){dir.create(paste0(labelInput,"\\Predict\\Age_predict"));dir.create(saveFolder)}
TblAgeRefSave=   paste0(labelInput,"\\TRAIN_TblAgeRef_",SelectedCategory[1], ".csv")
cl <- makePSOCKcluster(detectCores(logical = F))
clusterEvalQ(cl, {
library(sp)
library(spatialEco)
library(raster)
library(magick)
library(EBImage)
})
registerDoParallel(cl)
###########################
######################################################################################################
date1=substr(basename(labelInput),1,8)
ObsCountDir=paste0(labelInput,"\\Observer count")
PthObserverCount=list.files(ObsCountDir, pattern= ".shp", full.names=T)
if (file.exists(PthObserverCount)==T) {
ImgDirHoul=paste0(labelInput,"\\Predict\\Haulout")
ImgDirRookery=paste0(labelInput,"\\Predict\\Rookery")
ImgListHoul=list.files(ImgDirHoul)
Pth_GeoInfoImg=list.files(labelInput,full.names=T, pattern="_table.csv")
GeoInfoImg=read.csv(Pth_GeoInfoImg)
GeoInfoImg$link1=paste0(GeoInfoImg$date,"_",GeoInfoImg$link)
ImgList=GeoInfoImg[GeoInfoImg$link1 %in% ImgListHoul,]
TableCount=shapefile(PthObserverCount)
proj4string(TableCount) <- "+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs"
############
AgeRefRow1=NULL
for (i in 1:length(ImgList$link1)) {
imgName=paste0(ImgList$link1[i])
RowSort=ImgList[ImgList$link1==imgName,]
NSdif50=(RowSort$north-RowSort$south)/2
RowSort$north50=RowSort$north+NSdif50
SNdif50=(RowSort$north-RowSort$south)/2
RowSort$south50=RowSort$south-SNdif50
WEdiff50= (RowSort$east-RowSort$west)/2
RowSort$west50=RowSort$west-WEdiff50
EWdiff50= (RowSort$east-RowSort$west)/2
RowSort$east50=RowSort$east+EWdiff50
xlim<<-unique(c(RowSort$west50,RowSort$east50))
ylim<<-unique(c(RowSort$south50,RowSort$north50))
Limit512=data.frame(west=RowSort$west,east=RowSort$east,south=RowSort$south,north=RowSort$north)
Poligon512 <- as(raster::extent(Limit512$west,Limit512$east,Limit512$south,Limit512$north), "SpatialPolygons")
proj4string(Poligon512) <- "+proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs"
AmimalsInside512 <- point.in.poly(TableCount,Poligon512)
AmimalsInside512=as.data.frame(AmimalsInside512)
AmimalsInside512=AmimalsInside512[is.na(AmimalsInside512[,3]) == FALSE,]
if (length(AmimalsInside512$coords.x1)>0 ) {
pth_img=paste0(ImgDirHoul,"\\",imgName)
x=as.numeric((RowSort$east50-AmimalsInside512$coords.x1)/(RowSort$east50-RowSort$west50)*1024)
y=as.numeric((RowSort$north50-AmimalsInside512$coords.x2)/(RowSort$north50-RowSort$south50)*1024)
lat=as.numeric(AmimalsInside512$coords.x2)
lon= as.numeric(AmimalsInside512$coords.x1)
age=AmimalsInside512$LAYER
AgeRefRow= data.frame(age=age,lon,lat,x=x,y=y,pth_img = pth_img,OPP=labelInput)
AgeRefRow
AgeRefRow1=rbind(AgeRefRow,AgeRefRow1)
}
}
}
HED
head(AgeRefRow1)
labelInput
runApp()
